package com.hyunwoopark.futinfo.presentation.league_detail

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.hyunwoopark.futinfo.domain.use_case.GetBracketUseCase
import com.hyunwoopark.futinfo.domain.use_case.GetFixturesUseCase
import com.hyunwoopark.futinfo.domain.use_case.GetStandingsUseCase
import com.hyunwoopark.futinfo.domain.use_case.GetTopScorersUseCase
import com.hyunwoopark.futinfo.domain.use_case.GetTopAssistsUseCase
import com.hyunwoopark.futinfo.domain.use_case.GetLeaguesUseCase
import com.hyunwoopark.futinfo.domain.use_case.GetTeamStatisticsUseCase
import com.hyunwoopark.futinfo.util.Resource
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.util.Calendar
import java.text.SimpleDateFormat
import java.util.Locale
import java.util.Date
import javax.inject.Inject

/**
 * Î¶¨Í∑∏ ÏÉÅÏÑ∏ ÌôîÎ©¥ ViewModel
 */
@HiltViewModel
class LeagueDetailViewModel @Inject constructor(
    private val getStandingsUseCase: GetStandingsUseCase,
    private val getFixturesUseCase: GetFixturesUseCase,
    private val getTopScorersUseCase: GetTopScorersUseCase,
    private val getTopAssistsUseCase: GetTopAssistsUseCase,
    private val getBracketUseCase: GetBracketUseCase,
    private val getLeaguesUseCase: GetLeaguesUseCase,
    private val getTeamStatisticsUseCase: GetTeamStatisticsUseCase
) : ViewModel() {

    private val _state = MutableStateFlow(LeagueDetailState())
    val state: StateFlow<LeagueDetailState> = _state.asStateFlow()

    /**
     * ÌòÑÏû¨ ÏãúÏ¶åÏùÑ Í≥ÑÏÇ∞Ìï©ÎãàÎã§.
     * 7ÏõîÎ∂ÄÌÑ∞ Îã§ÏùåÌï¥ 6ÏõîÍπåÏßÄÎ•º Ìïú ÏãúÏ¶åÏúºÎ°ú Í≥ÑÏÇ∞
     * ÏãúÏ¶å Ï¢ÖÎ£å ÏßÅÌõÑÏóêÎäî Ïù¥Ï†Ñ ÏãúÏ¶åÏùÑ fallbackÏúºÎ°ú ÏÇ¨Ïö©
     */
    private fun getCurrentSeason(): Int {
        val calendar = Calendar.getInstance()
        val currentYear = calendar.get(Calendar.YEAR)
        val currentMonth = calendar.get(Calendar.MONTH)
        
        val season = if (currentMonth >= Calendar.JULY) {
            currentYear
        } else {
            currentYear - 1
        }
        
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] Í≥ÑÏÇ∞Îêú ÌòÑÏû¨ ÏãúÏ¶å: $season (ÌòÑÏû¨ ÎÖÑÎèÑ: $currentYear, ÌòÑÏû¨ Ïõî: ${currentMonth + 1})")
        return season
    }

    /**
     * Í∞ÄÏû• Ï†ÅÏ†àÌïú ÏãúÏ¶åÏùÑ Í≤∞Ï†ïÌï©ÎãàÎã§.
     * ÌòÑÏû¨ ÏßÑÌñâ Ï§ëÏù∏ ÏãúÏ¶åÏù¥ ÏóÜÎã§Î©¥ Í∞ÄÏû• ÏµúÍ∑ºÏóê Ï¢ÖÎ£åÎêú ÏãúÏ¶åÏùÑ ÏÇ¨Ïö©
     */
    private fun getOptimalSeason(): Int {
        val currentSeason = getCurrentSeason()
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏµúÏ†Å ÏãúÏ¶å Í≤∞Ï†ï - ÌòÑÏû¨ ÏãúÏ¶å: $currentSeason")
        
        // TODO: Ïã§Ï†úÎ°úÎäî APIÎ•º ÌÜµÌï¥ Ìï¥Îãπ Î¶¨Í∑∏Ïùò Í∞ÄÏû• ÏµúÏã† ÏãúÏ¶å Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï¥Ïïº Ìï®
        // ÌòÑÏû¨Îäî ÌòÑÏû¨ ÏãúÏ¶åÍ≥º Ïù¥Ï†Ñ ÏãúÏ¶åÏùÑ fallbackÏúºÎ°ú ÏÇ¨Ïö©
        return currentSeason
    }

    /**
     * Î¶¨Í∑∏ Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìúÌï©ÎãàÎã§.
     * Í∞ÄÏû• Î®ºÏ†Ä Î¶¨Í∑∏Ïùò Î™®Îì† ÏãúÏ¶å Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏôÄÏÑú ÏµúÏ†Å ÏãúÏ¶åÏùÑ Í≤∞Ï†ïÌïú ÌõÑ Îç∞Ïù¥ÌÑ∞Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
     */
    fun loadLeagueData(leagueId: Int, season: Int? = null) {
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] Î¶¨Í∑∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë - leagueId: $leagueId, ÏöîÏ≤≠Îêú season: $season")
        
        _state.value = _state.value.copy(
            leagueId = leagueId,
            season = season ?: getOptimalSeason()
        )
        
        viewModelScope.launch {
            try {
                // 1. Î®ºÏ†Ä Î¶¨Í∑∏Ïùò Î™®Îì† ÏãúÏ¶å Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§
                android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] 1Îã®Í≥Ñ: Î¶¨Í∑∏ ÏãúÏ¶å Ï†ïÎ≥¥ Ï°∞Ìöå ÏãúÏûë")
                getLeaguesUseCase(id = leagueId).collect { result ->
                    when (result) {
                        is Resource.Loading -> {
                            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] Î¶¨Í∑∏ ÏãúÏ¶å Ï†ïÎ≥¥ Î°úÎî© Ï§ë...")
                        }
                        is Resource.Success -> {
                            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] Î¶¨Í∑∏ ÏãúÏ¶å Ï†ïÎ≥¥ Ï°∞Ìöå ÏÑ±Í≥µ")
                            
                            // 2. ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏãúÏ¶å Î™©Î°ù Ï∂îÏ∂ú
                            val availableSeasons = if (isCupCompetition(leagueId)) {
                                emptyList()
                            } else {
                                extractAvailableSeasons(result.data)
                            }
                            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏãúÏ¶å: $availableSeasons")
                            
                            // 3. ÏµúÏ†Å ÏãúÏ¶å Í≤∞Ï†ï
                            val optimalSeason = determineOptimalSeason(result.data, season)
                            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] 2Îã®Í≥Ñ: ÏµúÏ†Å ÏãúÏ¶å Í≤∞Ï†ï ÏôÑÎ£å - $optimalSeason")
                            
                            // 4. Í≤∞Ï†ïÎêú ÏãúÏ¶åÏúºÎ°ú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
                            _state.value = _state.value.copy(
                                season = optimalSeason,
                                availableSeasons = availableSeasons
                            )
                            
                            // 4. Î™®Îì† Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞Î•º ÏùºÍ¥ÄÎêòÍ≤å ÎèôÏùºÌïú ÏãúÏ¶åÏúºÎ°ú Ï°∞Ìöå
                            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] 3Îã®Í≥Ñ: ÏãúÏ¶å $optimalSeason ÏúºÎ°ú Î™®Îì† Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏãúÏûë")
                            loadStandings(leagueId, optimalSeason)
                            loadFixtures(leagueId, optimalSeason)
                            loadTopScorers(leagueId, optimalSeason)
                            loadTopAssists(leagueId, optimalSeason)
                            loadBracket(leagueId, optimalSeason)
                            loadTeamStatistics(leagueId, optimalSeason)
                        }
                        is Resource.Error -> {
                            android.util.Log.e("LeagueDetailViewModel", "üîç [DEBUG] Î¶¨Í∑∏ ÏãúÏ¶å Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®: ${result.message}")
                            // Ïã§Ìå® Ïãú fallbackÏúºÎ°ú Í∏∞Î≥∏ ÏãúÏ¶å ÏÇ¨Ïö©
                            val fallbackSeason = season ?: getOptimalSeason()
                            android.util.Log.w("LeagueDetailViewModel", "üîç [DEBUG] Fallback ÏãúÏ¶å ÏÇ¨Ïö©: $fallbackSeason")
                            
                            _state.value = _state.value.copy(season = fallbackSeason)
                            loadStandings(leagueId, fallbackSeason)
                            loadFixtures(leagueId, fallbackSeason)
                            loadTopScorers(leagueId, fallbackSeason)
                            loadTopAssists(leagueId, fallbackSeason)
                            loadBracket(leagueId, fallbackSeason)
                            loadTeamStatistics(leagueId, fallbackSeason)
                        }
                    }
                }
            } catch (e: Exception) {
                android.util.Log.e("LeagueDetailViewModel", "üîç [DEBUG] Î¶¨Í∑∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë ÏòàÏô∏ Î∞úÏÉù: ${e.message}")
                // ÏòàÏô∏ Î∞úÏÉù Ïãú fallback
                val fallbackSeason = season ?: getOptimalSeason()
                _state.value = _state.value.copy(season = fallbackSeason)
                loadStandings(leagueId, fallbackSeason)
                loadFixtures(leagueId, fallbackSeason)
                loadTopScorers(leagueId, fallbackSeason)
                loadTopAssists(leagueId, fallbackSeason)
                loadBracket(leagueId, fallbackSeason)
                loadTeamStatistics(leagueId, fallbackSeason)
            }
        }
    }
    
    /**
     * Î¶¨Í∑∏Ïùò ÏãúÏ¶å Ï†ïÎ≥¥Î•º Í∏∞Î∞òÏúºÎ°ú ÏµúÏ†Å ÏãúÏ¶åÏùÑ Í≤∞Ï†ïÌï©ÎãàÎã§.
     * Ïö∞ÏÑ†ÏàúÏúÑ:
     * 1. current ÌîåÎûòÍ∑∏Í∞Ä trueÏù∏ ÏãúÏ¶å
     * 2. Í∞ÄÏû• ÏµúÍ∑ºÏóê Ï¢ÖÎ£åÎêú ÏãúÏ¶å (end dateÍ∞Ä Í≥ºÍ±∞Ïù∏ ÏãúÏ¶å Ï§ë Í∞ÄÏû• ÏµúÏã†)
     */
    private fun determineOptimalSeason(
        leaguesResponse: com.hyunwoopark.futinfo.data.remote.dto.LeaguesResponseDto?,
        requestedSeason: Int?
    ): Int {
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏµúÏ†Å ÏãúÏ¶å Í≤∞Ï†ï Î°úÏßÅ ÏãúÏûë")
        
        // ÏöîÏ≤≠Îêú ÏãúÏ¶åÏù¥ ÏûàÏúºÎ©¥ Ïö∞ÏÑ† ÏÇ¨Ïö©
        if (requestedSeason != null) {
            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏöîÏ≤≠Îêú ÏãúÏ¶å ÏÇ¨Ïö©: $requestedSeason")
            return requestedSeason
        }
        
        val leagueDetails = leaguesResponse?.response?.firstOrNull()
        val seasons = leagueDetails?.seasons
        
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] Ï°∞ÌöåÎêú ÏãúÏ¶å Î™©Î°ù: ${seasons?.map { "${it.year}(current:${it.current})" }}")
        
        if (seasons.isNullOrEmpty()) {
            val fallback = getOptimalSeason()
            android.util.Log.w("LeagueDetailViewModel", "üîç [DEBUG] ÏãúÏ¶å Ï†ïÎ≥¥ ÏóÜÏùå, fallback ÏÇ¨Ïö©: $fallback")
            return fallback
        }
        
        // 1. current ÌîåÎûòÍ∑∏Í∞Ä trueÏù∏ ÏãúÏ¶å Ï∞æÍ∏∞
        val currentSeason = seasons.find { it.current }
        if (currentSeason != null) {
            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÌòÑÏû¨ ÏãúÏ¶å Î∞úÍ≤¨: ${currentSeason.year}")
            return currentSeason.year
        }
        
        // 2. Í∞ÄÏû• ÏµúÍ∑ºÏóê Ï¢ÖÎ£åÎêú ÏãúÏ¶å Ï∞æÍ∏∞
        val today = Date()
        val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
        
        val endedSeasons = seasons.filter { season ->
            season.end?.let { endDateStr ->
                try {
                    val endDate = dateFormat.parse(endDateStr)
                    endDate?.before(today) ?: false
                } catch (e: Exception) {
                    android.util.Log.w("LeagueDetailViewModel", "üîç [DEBUG] ÎÇ†Ïßú ÌååÏã± Ïã§Ìå®: $endDateStr")
                    false
                }
            } ?: false
        }
        
        val mostRecentEndedSeason = endedSeasons.maxByOrNull { season ->
            try {
                dateFormat.parse(season.end!!)?.time ?: 0L
            } catch (e: Exception) {
                0L
            }
        }
        
        if (mostRecentEndedSeason != null) {
            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] Í∞ÄÏû• ÏµúÍ∑º Ï¢ÖÎ£åÎêú ÏãúÏ¶å Î∞úÍ≤¨: ${mostRecentEndedSeason.year}")
            return mostRecentEndedSeason.year
        }
        
        // 3. Î™®Îì† Î∞©Î≤ïÏù¥ Ïã§Ìå®ÌïòÎ©¥ Í∞ÄÏû• ÏµúÏã† ÏãúÏ¶å ÏÇ¨Ïö©
        val latestSeason = seasons.maxByOrNull { it.year }?.year
        if (latestSeason != null) {
            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] Í∞ÄÏû• ÏµúÏã† ÏãúÏ¶å ÏÇ¨Ïö©: $latestSeason")
            return latestSeason
        }
        
        // 4. ÏµúÏ¢Ö fallback
        val finalFallback = getOptimalSeason()
        android.util.Log.w("LeagueDetailViewModel", "üîç [DEBUG] ÏµúÏ¢Ö fallback ÏÇ¨Ïö©: $finalFallback")
        return finalFallback
    }
    
    /**
     * Î¶¨Í∑∏Ïùò ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏãúÏ¶å Î™©Î°ùÏùÑ Ï∂îÏ∂úÌï©ÎãàÎã§.
     */
    private fun extractAvailableSeasons(
        leaguesResponse: com.hyunwoopark.futinfo.data.remote.dto.LeaguesResponseDto?
    ): List<Int> {
        val leagueDetails = leaguesResponse?.response?.firstOrNull()
        val seasons = leagueDetails?.seasons
        
        if (seasons.isNullOrEmpty()) {
            // Í∏∞Î≥∏Í∞í: Í≥ºÍ±∞ 10ÎÖÑ + ÌòÑÏû¨ + ÎØ∏Îûò 1ÎÖÑ
            val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
            val currentMonth = java.util.Calendar.getInstance().get(java.util.Calendar.MONTH)
            
            // ÌòÑÏû¨ ÏãúÏ¶å Í≥ÑÏÇ∞ (7ÏõîÎ∂ÄÌÑ∞ Îã§Ïùå ÏãúÏ¶å)
            val currentSeason = if (currentMonth >= java.util.Calendar.JULY) currentYear else currentYear - 1
            
            // Í≥ºÍ±∞ 10ÎÖÑ + ÌòÑÏû¨ + ÎØ∏Îûò 1ÎÖÑ
            return ((currentSeason + 1) downTo (currentSeason - 10)).toList()
        }
        
        // APIÏóêÏÑú Ï†úÍ≥µÌïòÎäî ÏãúÏ¶å Î™©Î°ù ÏÇ¨Ïö©
        val availableSeasons = seasons.map { it.year }.toMutableSet()
        
        // ÎØ∏Îûò ÏãúÏ¶å Ï∂îÍ∞Ä (ÌòÑÏû¨ ÏãúÏ¶å + 1)
        val currentYear = java.util.Calendar.getInstance().get(java.util.Calendar.YEAR)
        val currentMonth = java.util.Calendar.getInstance().get(java.util.Calendar.MONTH)
        val currentSeason = if (currentMonth >= java.util.Calendar.JULY) currentYear else currentYear - 1
        availableSeasons.add(currentSeason + 1) // 2025/26 ÏãúÏ¶å Ï∂îÍ∞Ä
        
        return availableSeasons.sortedDescending()
    }
    
    /**
     * Ïªµ ÎåÄÌöåÏù∏ÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
     * Ïªµ ÎåÄÌöåÎäî ÏãúÏ¶å ÏÑ†ÌÉùÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§.
     */
    private fun isCupCompetition(leagueId: Int): Boolean {
        return when (leagueId) {
            // Íµ≠Í∞ÄÎ≥Ñ Ïªµ ÎåÄÌöå
            525, // FA Cup
            556, // Copa del Rey
            529, // DFB Pokal
            547, // Coppa Italia
            528, // Coupe de France
            // Íµ≠Ï†ú Ïªµ ÎåÄÌöå
            1, // World Cup
            4, // Euro Championship
            5, // Nations League
            9, // Copa America
            15, // Asian Cup / FIFA Club World Cup
            17, // AFC Asian Cup
            29, // Africa Cup of Nations
            530, // Copa Libertadores
            848 -> true // AFC Champions League
            else -> false
        }
    }
    
    /**
     * ÌÜ†ÎÑàÎ®ºÌä∏ ÌòïÏãùÏùò Î¶¨Í∑∏Ïù∏ÏßÄ ÌôïÏù∏Ìï©ÎãàÎã§.
     */
    private fun isTournamentLeague(leagueId: Int): Boolean {
        return when (leagueId) {
            2, // Champions League
            3, // Europa League
            848 -> true // AFC Champions League
            else -> false
        }
    }

    /**
     * ÏàúÏúÑÌëúÎ•º Î°úÎìúÌï©ÎãàÎã§.
     */
    private fun loadStandings(leagueId: Int, season: Int) {
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏàúÏúÑÌëú Î°úÎìú ÏãúÏûë - leagueId: $leagueId, season: $season")
        viewModelScope.launch {
            getStandingsUseCase(leagueId, season).collect { result ->
                when (result) {
                    is Resource.Loading -> {
                        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏàúÏúÑÌëú Î°úÎî© Ï§ë...")
                        _state.value = _state.value.copy(isStandingsLoading = true)
                    }
                    is Resource.Success -> {
                        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏàúÏúÑÌëú Î°úÎìú ÏÑ±Í≥µ - Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨: ${result.data != null}")
                        _state.value = _state.value.copy(
                            standings = result.data,
                            isStandingsLoading = false,
                            standingsError = null
                        )
                    }
                    is Resource.Error -> {
                        android.util.Log.e("LeagueDetailViewModel", "üîç [DEBUG] ÏàúÏúÑÌëú Î°úÎìú Ïã§Ìå® - Ïò§Î•ò: ${result.message}")
                        _state.value = _state.value.copy(
                            isStandingsLoading = false,
                            standingsError = result.message
                        )
                    }
                }
            }
        }
    }

    /**
     * Í≤ΩÍ∏∞ Î™©Î°ùÏùÑ Î°úÎìúÌï©ÎãàÎã§.
     */
    private fun loadFixtures(leagueId: Int, season: Int) {
        viewModelScope.launch {
            getFixturesUseCase(league = leagueId, season = season).collect { result ->
                when (result) {
                    is Resource.Loading -> {
                        _state.value = _state.value.copy(isFixturesLoading = true)
                    }
                    is Resource.Success -> {
                        _state.value = _state.value.copy(
                            fixtures = result.data,
                            isFixturesLoading = false,
                            fixturesError = null
                        )
                    }
                    is Resource.Error -> {
                        _state.value = _state.value.copy(
                            isFixturesLoading = false,
                            fixturesError = result.message
                        )
                    }
                }
            }
        }
    }

    /**
     * ÎìùÏ†êÏôïÏùÑ Î°úÎìúÌï©ÎãàÎã§.
     */
    private fun loadTopScorers(leagueId: Int, season: Int) {
        viewModelScope.launch {
            getTopScorersUseCase(leagueId, season).collect { result ->
                when (result) {
                    is Resource.Loading -> {
                        _state.value = _state.value.copy(isTopScorersLoading = true)
                    }
                    is Resource.Success -> {
                        _state.value = _state.value.copy(
                            topScorers = result.data,
                            isTopScorersLoading = false,
                            topScorersError = null
                        )
                    }
                    is Resource.Error -> {
                        _state.value = _state.value.copy(
                            isTopScorersLoading = false,
                            topScorersError = result.message
                        )
                    }
                }
            }
        }
    }

    /**
     * ÎèÑÏõÄÏôïÏùÑ Î°úÎìúÌï©ÎãàÎã§.
     */
    private fun loadTopAssists(leagueId: Int, season: Int) {
        viewModelScope.launch {
            getTopAssistsUseCase(leagueId, season).collect { result ->
                when (result) {
                    is Resource.Loading -> {
                        _state.value = _state.value.copy(isTopAssistsLoading = true)
                    }
                    is Resource.Success -> {
                        _state.value = _state.value.copy(
                            topAssists = result.data,
                            isTopAssistsLoading = false,
                            topAssistsError = null
                        )
                    }
                    is Resource.Error -> {
                        _state.value = _state.value.copy(
                            isTopAssistsLoading = false,
                            topAssistsError = result.message
                        )
                    }
                }
            }
        }
    }

    /**
     * ÎåÄÏßÑÌëúÎ•º Î°úÎìúÌï©ÎãàÎã§.
     */
    private fun loadBracket(leagueId: Int, season: Int) {
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÎåÄÏßÑÌëú Î°úÎìú ÏãúÏûë - leagueId: $leagueId, season: $season")
        viewModelScope.launch {
            getBracketUseCase(leagueId, season).collect { result ->
                when (result) {
                    is Resource.Loading -> {
                        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÎåÄÏßÑÌëú Î°úÎî© Ï§ë...")
                        _state.value = _state.value.copy(isBracketLoading = true)
                    }
                    is Resource.Success -> {
                        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÎåÄÏßÑÌëú Î°úÎìú ÏÑ±Í≥µ - ÎùºÏö¥Îìú Í∞úÏàò: ${result.data?.rounds?.size ?: 0}")
                        _state.value = _state.value.copy(
                            bracket = result.data,
                            isBracketLoading = false,
                            bracketError = null
                        )
                    }
                    is Resource.Error -> {
                        android.util.Log.e("LeagueDetailViewModel", "üîç [DEBUG] ÎåÄÏßÑÌëú Î°úÎìú Ïã§Ìå® - Ïò§Î•ò: ${result.message}")
                        _state.value = _state.value.copy(
                            isBracketLoading = false,
                            bracketError = result.message
                        )
                    }
                }
            }
        }
    }

    /**
     * ÌåÄ ÌÜµÍ≥ÑÎ•º Î°úÎìúÌï©ÎãàÎã§.
     */
    private fun loadTeamStatistics(leagueId: Int, season: Int) {
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÌåÄ ÌÜµÍ≥Ñ Î°úÎìú ÏãúÏûë - leagueId: $leagueId, season: $season")
        viewModelScope.launch {
            getTeamStatisticsUseCase(leagueId, season).collect { result ->
                when (result) {
                    is Resource.Loading -> {
                        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÌåÄ ÌÜµÍ≥Ñ Î°úÎî© Ï§ë...")
                        _state.value = _state.value.copy(isTeamStatisticsLoading = true)
                    }
                    is Resource.Success -> {
                        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÌåÄ ÌÜµÍ≥Ñ Î°úÎìú ÏÑ±Í≥µ - ÌåÄ Í∞úÏàò: ${result.data?.size ?: 0}")
                        _state.value = _state.value.copy(
                            teamStatistics = result.data,
                            isTeamStatisticsLoading = false,
                            teamStatisticsError = null
                        )
                    }
                    is Resource.Error -> {
                        android.util.Log.e("LeagueDetailViewModel", "üîç [DEBUG] ÌåÄ ÌÜµÍ≥Ñ Î°úÎìú Ïã§Ìå® - Ïò§Î•ò: ${result.message}")
                        _state.value = _state.value.copy(
                            isTeamStatisticsLoading = false,
                            teamStatisticsError = result.message
                        )
                    }
                }
            }
        }
    }

    /**
     * ÏÑ†ÌÉùÎêú ÌÉ≠ÏùÑ Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
     */
    fun selectTab(tabIndex: Int) {
        _state.value = _state.value.copy(selectedTab = tabIndex)
    }
    
    /**
     * ÏãúÏ¶å ÏÑ†ÌÉù Îã§Ïù¥ÏñºÎ°úÍ∑∏Î•º ÌëúÏãúÌï©ÎãàÎã§.
     */
    fun showSeasonSelector() {
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] showSeasonSelector Ìò∏Ï∂úÎê®")
        
        // Ïªµ ÎåÄÌöåÎäî ÏãúÏ¶å ÏÑ†ÌÉùÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏùå
        val currentLeagueId = _state.value.leagueId
        val availableSeasons = _state.value.availableSeasons
        
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÌòÑÏû¨ Î¶¨Í∑∏ ID: $currentLeagueId")
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏãúÏ¶å: $availableSeasons")
        android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] Ïªµ ÎåÄÌöå Ïó¨Î∂Ä: ${currentLeagueId?.let { isCupCompetition(it) }}")
        
        if (currentLeagueId != null && !isCupCompetition(currentLeagueId) && availableSeasons.isNotEmpty()) {
            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏãúÏ¶å ÏÑ†ÌÉù Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú")
            _state.value = _state.value.copy(showSeasonSelector = true)
        } else {
            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏãúÏ¶å ÏÑ†ÌÉù Î∂àÍ∞Ä - Ïªµ ÎåÄÌöå: ${currentLeagueId?.let { isCupCompetition(it) }}, ÏÇ¨Ïö© Í∞ÄÎä• ÏãúÏ¶å: ${availableSeasons.size}")
        }
    }
    
    /**
     * ÏãúÏ¶å ÏÑ†ÌÉù Îã§Ïù¥ÏñºÎ°úÍ∑∏Î•º Ïà®ÍπÅÎãàÎã§.
     */
    fun hideSeasonSelector() {
        _state.value = _state.value.copy(showSeasonSelector = false)
    }
    
    /**
     * ÏãúÏ¶åÏùÑ Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
     */
    fun changeSeason(newSeason: Int) {
        val currentState = _state.value
        if (currentState.season != newSeason && currentState.leagueId != null) {
            android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏãúÏ¶å Î≥ÄÍ≤Ω: ${currentState.season} -> $newSeason")
            
            // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî Î∞è ÏÉà ÏãúÏ¶å ÏÑ§Ï†ï
            _state.value = _state.value.copy(
                season = newSeason,
                showSeasonSelector = false,
                // Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
                standings = null,
                fixtures = null,
                topScorers = null,
                topAssists = null,
                teamStatistics = null,
                bracket = null,
                // Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï
                isStandingsLoading = true,
                isFixturesLoading = true,
                isTopScorersLoading = true,
                isTopAssistsLoading = true,
                isTeamStatisticsLoading = true,
                isBracketLoading = true
            )
            
            // ÏÉà ÏãúÏ¶å Îç∞Ïù¥ÌÑ∞ Î°úÎìú
            viewModelScope.launch {
                android.util.Log.d("LeagueDetailViewModel", "üîç [DEBUG] ÏÉà ÏãúÏ¶å Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏãúÏûë")
                
                // Î™®Îì† Îç∞Ïù¥ÌÑ∞ Î°úÎìú
                loadStandings(currentState.leagueId, newSeason)
                loadFixtures(currentState.leagueId, newSeason)
                loadTopScorers(currentState.leagueId, newSeason)
                loadTopAssists(currentState.leagueId, newSeason)
                loadTeamStatistics(currentState.leagueId, newSeason)
                
                // ÎåÄÏßÑÌëúÎäî ÌÜ†ÎÑàÎ®ºÌä∏ Î¶¨Í∑∏ÏóêÏÑúÎßå Î°úÎìú
                if (isTournamentLeague(currentState.leagueId)) {
                    loadBracket(currentState.leagueId, newSeason)
                }
            }
        }
    }

    /**
     * Îç∞Ïù¥ÌÑ∞Î•º ÏÉàÎ°úÍ≥†Ïπ®Ìï©ÎãàÎã§.
     */
    fun refresh() {
        val currentState = _state.value
        if (currentState.leagueId != null) {
            loadLeagueData(currentState.leagueId, currentState.season)
        }
    }
    
    /**
     * ÌÜ†ÎÑàÎ®ºÌä∏ ÎåÄÏßÑÌëúÍ∞Ä ÏïÑÏßÅ Î°úÎìúÎêòÏßÄ ÏïäÏïòÎã§Î©¥ Î°úÎìúÌï©ÎãàÎã§.
     */
    fun ensureBracketLoaded() {
        val currentState = _state.value
        if (currentState.leagueId != null && 
            isTournamentLeague(currentState.leagueId) &&
            currentState.bracket == null && 
            !currentState.isBracketLoading) {
            loadBracket(currentState.leagueId, currentState.season)
        }
    }
}