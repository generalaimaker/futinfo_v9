import SwiftUI
import Supabase
import AuthenticationServices

struct AuthView: View {
    @StateObject private var communityService = SupabaseCommunityService.shared
    @Environment(\.dismiss) private var dismiss
    @Environment(\.scenePhase) private var scenePhase
    
    @State private var isSignUp = false
    @State private var email = ""
    @State private var password = ""
    @State private var nickname = ""
    @State private var selectedTeamId: Int?
    @State private var showingTeamSelection = false
    @State private var isLoading = false
    @State private var errorMessage: String?
    
    var isValidForm: Bool {
        !email.isEmpty && !password.isEmpty && (isSignUp ? !nickname.isEmpty : true)
    }
    
    var body: some View {
        NavigationStack {
            ScrollView {
                VStack(spacing: 24) {
                    // Î°úÍ≥†
                    Image(systemName: "sportscourt.fill")
                        .font(.system(size: 80))
                        .foregroundColor(.blue)
                        .padding(.top, 40)
                    
                    Text("FutInfo Ïª§ÎÆ§ÎãàÌã∞")
                        .font(.largeTitle)
                        .fontWeight(.bold)
                    
                    Text(isSignUp ? "ÏÉà Í≥ÑÏ†ï ÎßåÎì§Í∏∞" : "Î°úÍ∑∏Ïù∏")
                        .font(.title2)
                        .foregroundColor(.secondary)
                    
                    // ÏûÖÎ†• Ìèº
                    VStack(spacing: 16) {
                        // Ïù¥Î©îÏùº
                        VStack(alignment: .leading, spacing: 8) {
                            Text("Ïù¥Î©îÏùº")
                                .font(.caption)
                                .foregroundColor(.secondary)
                            
                            TextField("Ïù¥Î©îÏùº Ï£ºÏÜå", text: $email)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                                .autocapitalization(.none)
                                .keyboardType(.emailAddress)
                        }
                        
                        // ÎπÑÎ∞ÄÎ≤àÌò∏
                        VStack(alignment: .leading, spacing: 8) {
                            Text("ÎπÑÎ∞ÄÎ≤àÌò∏")
                                .font(.caption)
                                .foregroundColor(.secondary)
                            
                            SecureField("ÎπÑÎ∞ÄÎ≤àÌò∏", text: $password)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                        }
                        
                        // ÌöåÏõêÍ∞ÄÏûÖÏãú Ï∂îÍ∞Ä ÌïÑÎìú
                        if isSignUp {
                            VStack(alignment: .leading, spacing: 8) {
                                Text("ÎãâÎÑ§ÏûÑ")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                
                                TextField("ÎãâÎÑ§ÏûÑ", text: $nickname)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                            }
                            
                            VStack(alignment: .leading, spacing: 8) {
                                Text("ÏùëÏõêÌïòÎäî ÌåÄ")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                                
                                Button {
                                    showingTeamSelection = true
                                } label: {
                                    HStack {
                                        if let teamId = selectedTeamId {
                                            AsyncImage(url: URL(string: "https://media.api-sports.io/football/teams/\(teamId).png")) { image in
                                                image
                                                    .resizable()
                                                    .scaledToFit()
                                            } placeholder: {
                                                Circle()
                                                    .fill(Color.gray.opacity(0.3))
                                            }
                                            .frame(width: 30, height: 30)
                                            
                                            Text("ÌåÄ ID: \(teamId)")
                                                .foregroundColor(.primary)
                                        } else {
                                            Image(systemName: "plus.circle")
                                                .foregroundColor(.gray)
                                            Text("ÌåÄ ÏÑ†ÌÉùÌïòÍ∏∞")
                                                .foregroundColor(.gray)
                                        }
                                        
                                        Spacer()
                                        
                                        Image(systemName: "chevron.right")
                                            .foregroundColor(.gray)
                                    }
                                    .padding()
                                    .background(Color.gray.opacity(0.1))
                                    .cornerRadius(8)
                                }
                            }
                        }
                    }
                    .padding(.horizontal)
                    
                    // ÏóêÎü¨ Î©îÏãúÏßÄ
                    if let errorMessage = errorMessage {
                        Text(errorMessage)
                            .font(.caption)
                            .foregroundColor(.red)
                            .padding(.horizontal)
                    }
                    
                    // Ïï°ÏÖò Î≤ÑÌäº
                    VStack(spacing: 12) {
                        // Ïù¥Î©îÏùº Î°úÍ∑∏Ïù∏/Í∞ÄÏûÖ Î≤ÑÌäº
                        Button {
                            performAuth()
                        } label: {
                            if isLoading {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                            } else {
                                Text(isSignUp ? "Í∞ÄÏûÖÌïòÍ∏∞" : "Î°úÍ∑∏Ïù∏")
                                    .fontWeight(.semibold)
                            }
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(isValidForm ? Color.blue : Color.gray)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                        .disabled(!isValidForm || isLoading)
                        
                        // Íµ¨Î∂ÑÏÑ†
                        HStack {
                            Rectangle()
                                .fill(Color.gray.opacity(0.3))
                                .frame(height: 1)
                            
                            Text("ÎòêÎäî")
                                .font(.caption)
                                .foregroundColor(.gray)
                                .padding(.horizontal, 8)
                            
                            Rectangle()
                                .fill(Color.gray.opacity(0.3))
                                .frame(height: 1)
                        }
                        .padding(.vertical, 8)
                        
                        // Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
                        Button {
                            performGoogleSignIn()
                        } label: {
                            HStack {
                                Image(systemName: "globe")
                                    .font(.system(size: 20))
                                Text("GoogleÎ°ú Í≥ÑÏÜçÌïòÍ∏∞")
                                    .fontWeight(.medium)
                            }
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.white)
                            .foregroundColor(.black)
                            .overlay(
                                RoundedRectangle(cornerRadius: 12)
                                    .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                            )
                            .cornerRadius(12)
                        }
                        .disabled(isLoading)
                        
                        // Ïï†Ìîå Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
                        SignInWithAppleButton(
                            .signIn,
                            onRequest: { request in
                                print("üçé Apple Sign In ÏöîÏ≤≠ ÏãúÏûë")
                                request.requestedScopes = [.fullName, .email]
                            },
                            onCompletion: { result in
                                print("üçé Apple Sign In Í≤∞Í≥º: \(result)")
                                switch result {
                                case .success(let authorization):
                                    print("üçé ÏÑ±Í≥µ - Authorization: \(authorization)")
                                    performAppleSignIn(authorization: authorization)
                                case .failure(let error):
                                    print("üçé Ïã§Ìå® - Error: \(error)")
                                    print("üçé Error Domain: \((error as NSError).domain)")
                                    print("üçé Error Code: \((error as NSError).code)")
                                    errorMessage = error.localizedDescription
                                }
                            }
                        )
                        .signInWithAppleButtonStyle(.black)
                        .frame(height: 50)
                        .cornerRadius(12)
                        .disabled(isLoading)
                        
                        Button {
                            withAnimation {
                                isSignUp.toggle()
                                errorMessage = nil
                            }
                        } label: {
                            Text(isSignUp ? "Ïù¥ÎØ∏ Í≥ÑÏ†ïÏù¥ ÏûàÏúºÏã†Í∞ÄÏöî? Î°úÍ∑∏Ïù∏" : "Í≥ÑÏ†ïÏù¥ ÏóÜÏúºÏã†Í∞ÄÏöî? Í∞ÄÏûÖÌïòÍ∏∞")
                                .font(.subheadline)
                                .foregroundColor(.blue)
                        }
                    }
                    .padding(.horizontal)
                    
                    Spacer(minLength: 40)
                }
            }
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Ï∑®ÏÜå") {
                        dismiss()
                    }
                }
            }
            .sheet(isPresented: $showingTeamSelection) {
                TeamSelectionForAuthView(selectedTeamId: $selectedTeamId)
            }
        }
        .onChange(of: communityService.isAuthenticated) { oldValue, newValue in
            // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú ÏûêÎèôÏúºÎ°ú Îã´Í∏∞
            if newValue && !communityService.needsProfileSetup {
                dismiss()
            }
        }
        .onReceive(NotificationCenter.default.publisher(for: Notification.Name("AuthStateChanged"))) { _ in
            // Ïù∏Ï¶ù ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏïåÎ¶ºÏùÑ Î∞õÏúºÎ©¥ ÌôïÏù∏
            if communityService.isAuthenticated && !communityService.needsProfileSetup {
                dismiss()
            }
        }
        .onChange(of: scenePhase) { oldPhase, newPhase in
            // Ïï±Ïù¥ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ìè¨Í∑∏ÎùºÏö¥ÎìúÎ°ú ÎèåÏïÑÏò¨ Îïå (Google Î°úÍ∑∏Ïù∏ ÌõÑ)
            if oldPhase == .background && newPhase == .active {
                Task {
                    // Ïù∏Ï¶ù ÏÉÅÌÉú Ïû¨ÌôïÏù∏
                    await communityService.checkAuthentication()
                    
                    // Î°úÍ∑∏Ïù∏ÎêòÏóàÏúºÎ©¥ Ï∞Ω Îã´Í∏∞
                    if communityService.isAuthenticated && !communityService.needsProfileSetup {
                        dismiss()
                    }
                }
            }
        }
    }
    
    private func performAuth() {
        isLoading = true
        errorMessage = nil
        
        Task {
            do {
                if isSignUp {
                    try await communityService.signUp(
                        email: email,
                        password: password,
                        nickname: nickname
                    )
                } else {
                    try await communityService.signIn(
                        email: email,
                        password: password
                    )
                }
                
                // Sync favorites after successful login
                await FavoriteService.shared.syncFromServerToLocal()
                
                await MainActor.run {
                    dismiss()
                }
            } catch {
                await MainActor.run {
                    errorMessage = error.localizedDescription
                    isLoading = false
                }
            }
        }
    }
    
    private func performGoogleSignIn() {
        isLoading = true
        errorMessage = nil
        
        Task {
            do {
                // Supabase OAuth Î°úÍ∑∏Ïù∏
                let redirectURL = URL(string: "futinfo://auth-callback")!
                
                try await SupabaseService.shared.client.auth.signInWithOAuth(
                    provider: .google,
                    redirectTo: redirectURL,
                    scopes: "profile email",
                    queryParams: [
                        (name: "access_type", value: "offline"),
                        (name: "prompt", value: "consent")
                    ]
                )
                
                // OAuthÍ∞Ä ÏãúÏûëÎêòÎ©¥ Î∏åÎùºÏö∞Ï†ÄÎ°ú Ïù¥ÎèôÌïòÎØÄÎ°ú Î°úÎî© ÏÉÅÌÉú Ìï¥Ï†ú
                await MainActor.run {
                    isLoading = false
                }
                
                // OAuth ÏôÑÎ£å ÌõÑ Ï≤òÎ¶¨Îäî footballApp.swiftÏùò onOpenURLÏóêÏÑú Ï≤òÎ¶¨
                
                // 3Ï¥àÎßàÎã§ Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ (ÏµúÎåÄ 10Ìöå)
                for _ in 0..<10 {
                    try? await Task.sleep(nanoseconds: 3_000_000_000) // 3Ï¥à ÎåÄÍ∏∞
                    
                    // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏
                    await communityService.checkAuthentication()
                    
                    // Î°úÍ∑∏Ïù∏ÎêòÏóàÏúºÎ©¥ Ï∞Ω Îã´Í∏∞
                    if communityService.isAuthenticated && !communityService.needsProfileSetup {
                        await MainActor.run {
                            dismiss()
                        }
                        break
                    }
                }
            } catch {
                await MainActor.run {
                    errorMessage = "Google Î°úÍ∑∏Ïù∏ Ïã§Ìå®: \(error.localizedDescription)"
                    isLoading = false
                }
            }
        }
    }
    
    private func performAppleSignIn(authorization: ASAuthorization) {
        isLoading = true
        errorMessage = nil
        
        guard let appleCredential = authorization.credential as? ASAuthorizationAppleIDCredential,
              let identityToken = appleCredential.identityToken,
              let tokenString = String(data: identityToken, encoding: .utf8) else {
            errorMessage = "Apple Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§"
            isLoading = false
            return
        }
        
        Task {
            do {
                // ÎÑ§Ïù¥Ìã∞Î∏å Apple Sign In ÏÇ¨Ïö©
                try await SupabaseService.shared.client.auth.signInWithIdToken(
                    credentials: .init(
                        provider: .apple,
                        idToken: tokenString
                    )
                )
                
                // ÏÑ±Í≥µ Ïãú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû•
                if let user = try? await SupabaseService.shared.client.auth.session.user {
                    print("üçé Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ! User ID: \(user.id)")
                    
                    // ÌîÑÎ°úÌïÑÏù¥ ÏóÜÏùÑ ÏàòÎèÑ ÏûàÏúºÎØÄÎ°ú Î≥ÑÎèÑ Ï≤òÎ¶¨
                    _ = await SupabaseCommunityService.shared.checkAuthentication()
                }
                
                // ÌîÑÎ°úÌïÑ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ (ÏµúÏ¥à Î°úÍ∑∏Ïù∏Ïãú)
                if let fullName = appleCredential.fullName {
                    let displayName = [fullName.givenName, fullName.familyName]
                        .compactMap { $0 }
                        .joined(separator: " ")
                    
                    if !displayName.isEmpty {
                        // ÎãâÎÑ§ÏûÑ ÏóÖÎç∞Ïù¥Ìä∏ Î°úÏßÅ Ï∂îÍ∞Ä ÌïÑÏöî
                    }
                }
                
                await MainActor.run {
                    dismiss()
                }
            } catch {
                await MainActor.run {
                    errorMessage = "Apple Î°úÍ∑∏Ïù∏ Ïã§Ìå®: \(error.localizedDescription)"
                    isLoading = false
                }
            }
        }
    }
}

// ÌåÄ ÏÑ†ÌÉù Î∑∞ (Ïù∏Ï¶ùÏö©)
struct TeamSelectionForAuthView: View {
    @Binding var selectedTeamId: Int?
    @Environment(\.dismiss) private var dismiss
    @State private var selectedLeague = 39  // Í∏∞Î≥∏Í∞í: ÌîÑÎ¶¨ÎØ∏Ïñ¥Î¶¨Í∑∏
    @State private var teams: [Team] = []
    @State private var isLoading = false
    
    let leagues = [
        (id: 39, name: "ÌîÑÎ¶¨ÎØ∏Ïñ¥Î¶¨Í∑∏"),
        (id: 140, name: "ÎùºÎ¶¨Í∞Ä"),
        (id: 78, name: "Î∂ÑÎç∞Ïä§Î¶¨Í∞Ä"),
        (id: 135, name: "ÏÑ∏Î¶¨Ïóê A"),
        (id: 61, name: "Î¶¨Í∑∏ 1")
    ]
    
    var body: some View {
        NavigationStack {
            VStack {
                // Î¶¨Í∑∏ ÏÑ†ÌÉù
                Picker("Î¶¨Í∑∏ ÏÑ†ÌÉù", selection: $selectedLeague) {
                    ForEach(leagues, id: \.id) { league in
                        Text(league.name).tag(league.id)
                    }
                }
                .pickerStyle(SegmentedPickerStyle())
                .padding()
                
                // ÌåÄ Î™©Î°ù
                if isLoading {
                    Spacer()
                    ProgressView()
                    Spacer()
                } else {
                    List {
                        ForEach(teams, id: \.id) { team in
                        Button {
                            selectedTeamId = team.id
                            dismiss()
                        } label: {
                            HStack {
                                AsyncImage(url: URL(string: team.logo)) { image in
                                    image
                                        .resizable()
                                        .scaledToFit()
                                } placeholder: {
                                    Circle()
                                        .fill(Color.gray.opacity(0.3))
                                }
                                .frame(width: 40, height: 40)
                                
                                Text(team.name)
                                    .foregroundColor(.primary)
                                
                                Spacer()
                                
                                if selectedTeamId == team.id {
                                    Image(systemName: "checkmark.circle.fill")
                                        .foregroundColor(.blue)
                                }
                            }
                            .padding(.vertical, 4)
                        }
                        }
                    }
                }
            }
            .navigationTitle("ÌåÄ ÏÑ†ÌÉù")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Ï∑®ÏÜå") {
                        dismiss()
                    }
                }
            }
            .onAppear {
                loadTeams()
            }
            .onChange(of: selectedLeague) { oldValue, newValue in
                loadTeams()
            }
        }
    }
    
    private func loadTeams() {
        isLoading = true
        Task {
            do {
                // ÏàúÏúÑ Ï†ïÎ≥¥ÏóêÏÑú ÌåÄ Î™©Î°ù Ï∂îÏ∂ú
                let currentSeason = Calendar.current.component(.year, from: Date())
                let standings = try await FootballAPIService.shared.getStandings(leagueId: selectedLeague, season: currentSeason)
                let fetchedTeams = standings.map { standing in
                    Team(
                        id: standing.team.id,
                        name: standing.team.name,
                        logo: standing.team.logo,
                        winner: nil,
                        colors: nil
                    )
                }
                await MainActor.run {
                    self.teams = fetchedTeams
                    self.isLoading = false
                }
            } catch {
                print("Failed to load teams: \(error)")
                await MainActor.run {
                    self.teams = []
                    self.isLoading = false
                    
                    // ÏóêÎü¨ Î∞úÏÉù Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú ÌåÄ Î™©Î°ù ÌëúÏãú (Í≤åÏãúÌåêÍ≥º ÎèôÏùºÌïú ÌåÄ Î∞è ÏàúÏÑú)
                    if selectedLeague == 39 { // ÌîÑÎ¶¨ÎØ∏Ïñ¥Î¶¨Í∑∏ - Î™ÖÎ¨∏ÌåÄ Ïö∞ÏÑ† Ï†ïÎ†¨
                        self.teams = [
                            Team(id: 33, name: "Îß®Ï≤¥Ïä§ÌÑ∞ Ïú†ÎÇòÏù¥Ìã∞Îìú", logo: "https://media.api-sports.io/football/teams/33.png", winner: nil, colors: nil),
                            Team(id: 40, name: "Î¶¨Î≤ÑÌíÄ", logo: "https://media.api-sports.io/football/teams/40.png", winner: nil, colors: nil),
                            Team(id: 42, name: "ÏïÑÏä§ÎÑê", logo: "https://media.api-sports.io/football/teams/42.png", winner: nil, colors: nil),
                            Team(id: 49, name: "Ï≤ºÏãú", logo: "https://media.api-sports.io/football/teams/49.png", winner: nil, colors: nil),
                            Team(id: 50, name: "Îß®Ï≤¥Ïä§ÌÑ∞ ÏãúÌã∞", logo: "https://media.api-sports.io/football/teams/50.png", winner: nil, colors: nil),
                            Team(id: 47, name: "ÌÜ†Ìä∏ÎÑò", logo: "https://media.api-sports.io/football/teams/47.png", winner: nil, colors: nil),
                            Team(id: 34, name: "Îâ¥Ï∫êÏä¨", logo: "https://media.api-sports.io/football/teams/34.png", winner: nil, colors: nil),
                            Team(id: 66, name: "ÏïÑÏä§ÌÜ§ ÎπåÎùº", logo: "https://media.api-sports.io/football/teams/66.png", winner: nil, colors: nil),
                            Team(id: 48, name: "Ïõ®Ïä§Ìä∏ÌñÑ", logo: "https://media.api-sports.io/football/teams/48.png", winner: nil, colors: nil),
                            Team(id: 51, name: "Î∏åÎùºÏù¥Ìäº", logo: "https://media.api-sports.io/football/teams/51.png", winner: nil, colors: nil)
                        ]
                    } else if selectedLeague == 140 { // ÎùºÎ¶¨Í∞Ä - Î™ÖÎ¨∏ÌåÄ Ïö∞ÏÑ† Ï†ïÎ†¨
                        self.teams = [
                            Team(id: 541, name: "Î†àÏïå ÎßàÎìúÎ¶¨Îìú", logo: "https://media.api-sports.io/football/teams/541.png", winner: nil, colors: nil),
                            Team(id: 529, name: "Î∞îÎ•¥ÏÖÄÎ°úÎÇò", logo: "https://media.api-sports.io/football/teams/529.png", winner: nil, colors: nil),
                            Team(id: 530, name: "ÏïÑÌãÄÎ†àÌã∞ÏΩî ÎßàÎìúÎ¶¨Îìú", logo: "https://media.api-sports.io/football/teams/530.png", winner: nil, colors: nil),
                            Team(id: 536, name: "ÏÑ∏ÎπÑÏïº", logo: "https://media.api-sports.io/football/teams/536.png", winner: nil, colors: nil),
                            Team(id: 532, name: "Î∞úÎ†åÏãúÏïÑ", logo: "https://media.api-sports.io/football/teams/532.png", winner: nil, colors: nil),
                            Team(id: 533, name: "ÎπÑÏïºÎ†àÏïå", logo: "https://media.api-sports.io/football/teams/533.png", winner: nil, colors: nil),
                            Team(id: 548, name: "Î†àÏïå ÏÜåÏãúÏóêÎã§Îìú", logo: "https://media.api-sports.io/football/teams/548.png", winner: nil, colors: nil),
                            Team(id: 543, name: "Î†àÏïå Î≤†Ìã∞Ïä§", logo: "https://media.api-sports.io/football/teams/543.png", winner: nil, colors: nil),
                            Team(id: 531, name: "ÏïÑÌãÄÎ†àÌã± ÎπåÎ∞îÏò§", logo: "https://media.api-sports.io/football/teams/531.png", winner: nil, colors: nil),
                            Team(id: 538, name: "ÏÖÄÌÉÄ ÎπÑÍ≥†", logo: "https://media.api-sports.io/football/teams/538.png", winner: nil, colors: nil)
                        ]
                    } else if selectedLeague == 78 { // Î∂ÑÎç∞Ïä§Î¶¨Í∞Ä - Î™ÖÎ¨∏ÌåÄ Ïö∞ÏÑ† Ï†ïÎ†¨
                        self.teams = [
                            Team(id: 157, name: "Î∞îÏù¥ÏóêÎ•∏ ÎÆåÌó®", logo: "https://media.api-sports.io/football/teams/157.png", winner: nil, colors: nil),
                            Team(id: 165, name: "Î≥¥Î£®ÏãúÏïÑ ÎèÑÎ•¥Ìä∏Î¨∏Ìä∏", logo: "https://media.api-sports.io/football/teams/165.png", winner: nil, colors: nil),
                            Team(id: 168, name: "Î∞îÏù¥Ïñ¥ Î†àÎ≤ÑÏø†Ï††", logo: "https://media.api-sports.io/football/teams/168.png", winner: nil, colors: nil),
                            Team(id: 173, name: "RB ÎùºÏù¥ÌîÑÏπòÌûà", logo: "https://media.api-sports.io/football/teams/173.png", winner: nil, colors: nil),
                            Team(id: 163, name: "Î≥¥Î£®ÏãúÏïÑ Î¨ÄÌó®Í∏ÄÎùºÎìúÎ∞îÌùê", logo: "https://media.api-sports.io/football/teams/163.png", winner: nil, colors: nil),
                            Team(id: 169, name: "ÏïÑÏù∏Ìä∏ÎùºÌùêÌä∏ ÌîÑÎûëÌÅ¨Ìë∏Î•¥Ìä∏", logo: "https://media.api-sports.io/football/teams/169.png", winner: nil, colors: nil),
                            Team(id: 161, name: "VfL Î≥ºÌîÑÏä§Î∂ÄÎ•¥ÌÅ¨", logo: "https://media.api-sports.io/football/teams/161.png", winner: nil, colors: nil),
                            Team(id: 172, name: "VfB ÏäàÌà¨Ìä∏Í∞ÄÎ•¥Ìä∏", logo: "https://media.api-sports.io/football/teams/172.png", winner: nil, colors: nil),
                            Team(id: 178, name: "Î≤†Î•¥Îçî Î∏åÎ†àÎ©ò", logo: "https://media.api-sports.io/football/teams/178.png", winner: nil, colors: nil),
                            Team(id: 182, name: "Ïö∞ÎãàÏò® Î≤†Î•ºÎ¶∞", logo: "https://media.api-sports.io/football/teams/182.png", winner: nil, colors: nil)
                        ]
                    } else if selectedLeague == 135 { // ÏÑ∏Î¶¨Ïóê A - Î™ÖÎ¨∏ÌåÄ Ïö∞ÏÑ† Ï†ïÎ†¨
                        self.teams = [
                            Team(id: 496, name: "Ïú†Î≤§Ìà¨Ïä§", logo: "https://media.api-sports.io/football/teams/496.png", winner: nil, colors: nil),
                            Team(id: 505, name: "Ïù∏ÌÑ∞", logo: "https://media.api-sports.io/football/teams/505.png", winner: nil, colors: nil),
                            Team(id: 489, name: "AC Î∞ÄÎûÄ", logo: "https://media.api-sports.io/football/teams/489.png", winner: nil, colors: nil),
                            Team(id: 492, name: "ÎÇòÌè¥Î¶¨", logo: "https://media.api-sports.io/football/teams/492.png", winner: nil, colors: nil),
                            Team(id: 497, name: "Î°úÎßà", logo: "https://media.api-sports.io/football/teams/497.png", winner: nil, colors: nil),
                            Team(id: 487, name: "ÎùºÏπòÏò§", logo: "https://media.api-sports.io/football/teams/487.png", winner: nil, colors: nil),
                            Team(id: 499, name: "ÏïÑÌÉàÎûÄÌÉÄ", logo: "https://media.api-sports.io/football/teams/499.png", winner: nil, colors: nil),
                            Team(id: 502, name: "ÌîºÏò§Î†åÌã∞ÎÇò", logo: "https://media.api-sports.io/football/teams/502.png", winner: nil, colors: nil),
                            Team(id: 503, name: "ÌÜ†Î¶¨ÎÖ∏", logo: "https://media.api-sports.io/football/teams/503.png", winner: nil, colors: nil),
                            Team(id: 495, name: "Ï†úÎÖ∏ÏïÑ", logo: "https://media.api-sports.io/football/teams/495.png", winner: nil, colors: nil)
                        ]
                    } else if selectedLeague == 61 { // Î¶¨Í∑∏ 1 - Î™ÖÎ¨∏ÌåÄ Ïö∞ÏÑ† Ï†ïÎ†¨
                        self.teams = [
                            Team(id: 85, name: "ÌååÎ¶¨ ÏÉùÏ†úÎ•¥Îßπ", logo: "https://media.api-sports.io/football/teams/85.png", winner: nil, colors: nil),
                            Team(id: 80, name: "Î¶¨Ïòπ", logo: "https://media.api-sports.io/football/teams/80.png", winner: nil, colors: nil),
                            Team(id: 81, name: "ÎßàÎ•¥ÏÑ∏Ïú†", logo: "https://media.api-sports.io/football/teams/81.png", winner: nil, colors: nil),
                            Team(id: 91, name: "Î™®ÎÇòÏΩî", logo: "https://media.api-sports.io/football/teams/91.png", winner: nil, colors: nil),
                            Team(id: 79, name: "Î¶¥", logo: "https://media.api-sports.io/football/teams/79.png", winner: nil, colors: nil),
                            Team(id: 84, name: "ÎãàÏä§", logo: "https://media.api-sports.io/football/teams/84.png", winner: nil, colors: nil),
                            Team(id: 1063, name: "ÏÉùÌÖåÌã∞Ïóî", logo: "https://media.api-sports.io/football/teams/1063.png", winner: nil, colors: nil),
                            Team(id: 78, name: "Î≥¥Î•¥ÎèÑ", logo: "https://media.api-sports.io/football/teams/78.png", winner: nil, colors: nil),
                            Team(id: 83, name: "ÎÇ≠Ìä∏", logo: "https://media.api-sports.io/football/teams/83.png", winner: nil, colors: nil),
                            Team(id: 112, name: "Ïä§Ìä∏ÎùºÏä§Î∂ÄÎ•¥", logo: "https://media.api-sports.io/football/teams/112.png", winner: nil, colors: nil)
                        ]
                    }
                }
            }
        }
    }
}